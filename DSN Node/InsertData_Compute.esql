

CREATE COMPUTE MODULE InsertData_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

--	CREATE PROCEDURE CopyEntireMessage() BEGIN
--		DECLARE insertData REFERENCE TO InputRoot.XMLNSC;
--		 DECLARE data ROW;
--		 SET data =ROW('venkat','5000','java');
--		 
	--	SET data = ('insert into employee843 values(?,?,?)',data.name,data.id,data.technology);
		--SET OutputRoot.JSON.Data=PASSTHRU(data VALUES(insertData));
--		CREATE PROCEDURE CopyEntireMessage() BEGIN
--    DECLARE insertData REFERENCE TO InputRoot.XMLNSC;
--    DECLARE data ROW;
--    SET data = ROW('virat', '18', 'cricket');
--    SET OutputRoot.JSON.Data = PASSTHRU('insert into employee843 values(?, ?, ?)', data.name,data.id,data.technology);
--
--		
	CREATE PROCEDURE CopyEntireMessage() BEGIN
    DECLARE insertData REFERENCE TO InputRoot.XMLNSC.test;
    
    
    
    DECLARE a CHARACTER;
    DECLARE b CHARACTER;
    DECLARE c CHARACTER;
    
    SET a=insertData.name;
    SET b=insertData.id;
    SET c=insertData.technology;
   INSERT INTO Database.employee843(name,id,technology )VALUES (a,b,c );
   
   
SET OutputRoot.JSON.Data.data = 'Successfully inserted';

		
	END;
END MODULE;
 